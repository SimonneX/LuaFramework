//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PureMVC_Patterns_FacadeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(PureMVC.Patterns.Facade), typeof(System.Object));
		L.RegFunction("RegisterProxy", RegisterProxy);
		L.RegFunction("RetrieveProxy", RetrieveProxy);
		L.RegFunction("RemoveProxy", RemoveProxy);
		L.RegFunction("HasProxy", HasProxy);
		L.RegFunction("RegisterCommand", RegisterCommand);
		L.RegFunction("RemoveCommand", RemoveCommand);
		L.RegFunction("HasCommand", HasCommand);
		L.RegFunction("RegisterMediator", RegisterMediator);
		L.RegFunction("RetrieveMediator", RetrieveMediator);
		L.RegFunction("RemoveMediator", RemoveMediator);
		L.RegFunction("HasMediator", HasMediator);
		L.RegFunction("NotifyObservers", NotifyObservers);
		L.RegFunction("SendNotification", SendNotification);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Instance", get_Instance, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterProxy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PureMVC.Patterns.Facade obj = (PureMVC.Patterns.Facade)ToLua.CheckObject<PureMVC.Patterns.Facade>(L, 1);
			PureMVC.Interfaces.IProxy arg0 = (PureMVC.Interfaces.IProxy)ToLua.CheckObject<PureMVC.Interfaces.IProxy>(L, 2);
			obj.RegisterProxy(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RetrieveProxy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PureMVC.Patterns.Facade obj = (PureMVC.Patterns.Facade)ToLua.CheckObject<PureMVC.Patterns.Facade>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			PureMVC.Interfaces.IProxy o = obj.RetrieveProxy(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveProxy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PureMVC.Patterns.Facade obj = (PureMVC.Patterns.Facade)ToLua.CheckObject<PureMVC.Patterns.Facade>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			PureMVC.Interfaces.IProxy o = obj.RemoveProxy(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasProxy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PureMVC.Patterns.Facade obj = (PureMVC.Patterns.Facade)ToLua.CheckObject<PureMVC.Patterns.Facade>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.HasProxy(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterCommand(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PureMVC.Patterns.Facade obj = (PureMVC.Patterns.Facade)ToLua.CheckObject<PureMVC.Patterns.Facade>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Type arg1 = ToLua.CheckMonoType(L, 3);
			obj.RegisterCommand(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveCommand(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PureMVC.Patterns.Facade obj = (PureMVC.Patterns.Facade)ToLua.CheckObject<PureMVC.Patterns.Facade>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.RemoveCommand(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasCommand(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PureMVC.Patterns.Facade obj = (PureMVC.Patterns.Facade)ToLua.CheckObject<PureMVC.Patterns.Facade>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.HasCommand(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterMediator(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PureMVC.Patterns.Facade obj = (PureMVC.Patterns.Facade)ToLua.CheckObject<PureMVC.Patterns.Facade>(L, 1);
			PureMVC.Interfaces.IMediator arg0 = (PureMVC.Interfaces.IMediator)ToLua.CheckObject<PureMVC.Interfaces.IMediator>(L, 2);
			obj.RegisterMediator(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RetrieveMediator(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PureMVC.Patterns.Facade obj = (PureMVC.Patterns.Facade)ToLua.CheckObject<PureMVC.Patterns.Facade>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			PureMVC.Interfaces.IMediator o = obj.RetrieveMediator(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveMediator(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PureMVC.Patterns.Facade obj = (PureMVC.Patterns.Facade)ToLua.CheckObject<PureMVC.Patterns.Facade>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			PureMVC.Interfaces.IMediator o = obj.RemoveMediator(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasMediator(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PureMVC.Patterns.Facade obj = (PureMVC.Patterns.Facade)ToLua.CheckObject<PureMVC.Patterns.Facade>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.HasMediator(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NotifyObservers(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PureMVC.Patterns.Facade obj = (PureMVC.Patterns.Facade)ToLua.CheckObject<PureMVC.Patterns.Facade>(L, 1);
			PureMVC.Interfaces.INotification arg0 = (PureMVC.Interfaces.INotification)ToLua.CheckObject<PureMVC.Interfaces.INotification>(L, 2);
			obj.NotifyObservers(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendNotification(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				PureMVC.Patterns.Facade obj = (PureMVC.Patterns.Facade)ToLua.CheckObject<PureMVC.Patterns.Facade>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.SendNotification(arg0);
				return 0;
			}
			else if (count == 3)
			{
				PureMVC.Patterns.Facade obj = (PureMVC.Patterns.Facade)ToLua.CheckObject<PureMVC.Patterns.Facade>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				obj.SendNotification(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				PureMVC.Patterns.Facade obj = (PureMVC.Patterns.Facade)ToLua.CheckObject<PureMVC.Patterns.Facade>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				string arg2 = ToLua.CheckString(L, 4);
				obj.SendNotification(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PureMVC.Patterns.Facade.SendNotification");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, PureMVC.Patterns.Facade.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

